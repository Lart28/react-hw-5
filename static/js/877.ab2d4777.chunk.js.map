{"version":3,"file":"static/js/877.ab2d4777.chunk.js","mappings":"2NAOe,SAASA,IACtB,IAAAC,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACdG,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRC,MAAM,GAADC,OAVQ,6BAUI,aAAAA,OAAYJ,EAAO,qBAAAI,OATxB,qCAUTC,MAAK,SAAAC,GACJ,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,IAAIC,MAAM,yFAClC,IACCN,MAAK,SAAAO,GAAO,OAAIjB,EAAYiB,EAAQ,IACpCC,OAAM,SAAAf,GACLC,EAASD,EACX,GACJ,GAAG,CAACE,KAGFc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGlB,IAASmB,EAAAA,EAAAA,KAAA,MAAAD,SAAKlB,EAAMoB,UACpBxB,IAAYuB,EAAAA,EAAAA,KAAA,WAAAD,UACXC,EAAAA,EAAAA,KAAA,MAAAD,SACGtB,EAASyB,KAAKC,KAAI,SAAAC,GAAA,IAAEC,EAAED,EAAFC,GAAIC,EAAYF,EAAZE,aAAcC,EAAIH,EAAJG,KAAMC,EAASJ,EAATI,UAAS,OACpDX,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKS,MAAM,QAAQC,IAAG,GAAAvB,OA5BpB,kCA4BgC,KAAAA,OAAImB,GAAgBK,IAAI,MAC1DX,EAAAA,EAAAA,KAAA,KAAAD,SAAIQ,KACJP,EAAAA,EAAAA,KAAA,KAAAD,SAAIS,MAHGH,EAIJ,UAKjB,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'af02fe4d7c3feb4bd28b36239d2e4dd2';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport default function Cast() {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}`)\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        } \n        return Promise.reject(new Error('Сталась помилка'))\n      })\n      .then(credits => setResponse(credits))\n      .catch(error => {\n        setError(error)\n      })\n  }, [movieId])\n  \n  return (\n    <>\n      {error && <h1>{error.message}</h1>}\n      {response && <section>\n        <ul>\n          {response.cast.map(({id, profile_path, name, character}) =>\n            <li key={id}>\n              <img width='100px' src={`${IMG_URL}/${profile_path}`} alt=\"\" />\n              <p>{name}</p>\n              <p>{character}</p>\n            </li>)}\n        </ul>\n        </section>}\n    </>\n  )\n}"],"names":["Cast","_useState","useState","_useState2","_slicedToArray","response","setResponse","_useState3","_useState4","error","setError","movieId","useParams","useEffect","fetch","concat","then","res","ok","json","Promise","reject","Error","credits","catch","_jsxs","_Fragment","children","_jsx","message","cast","map","_ref","id","profile_path","name","character","width","src","alt"],"sourceRoot":""}